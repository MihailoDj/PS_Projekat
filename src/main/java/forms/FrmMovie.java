/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forms;

import com.github.lgooddatepicker.components.DatePicker;
import com.github.lgooddatepicker.components.DatePickerSettings;
import forms.util.FormMode;
import java.util.List;
import javax.swing.JOptionPane;
import domain.Movie;
import domain.Director;
import controller.Controller;
import java.awt.Dimension;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Mihailo
 */
public class FrmMovie extends javax.swing.JDialog {
    private DatePicker datePicker;
    /**
     * Creates new form FrmFilm
     */
    public FrmMovie(java.awt.Frame parent, boolean modal, FormMode mode, Movie movie) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Movie form");
        
        try {
            prepareView(mode, movie);
        } catch (Exception ex) {
            Logger.getLogger(FrmMovie.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "There was an error", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblMoveID = new javax.swing.JLabel();
        txtMovieID = new javax.swing.JTextField();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblReleaseDate = new javax.swing.JLabel();
        lblDirector = new javax.swing.JLabel();
        lblDescription = new javax.swing.JLabel();
        cbDirector = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblScore = new javax.swing.JLabel();
        txtScore = new javax.swing.JTextField();
        btnEnableChanges = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jPanelDatePicker = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        lblMoveID.setText("ID:");

        lblName.setText("Name:");

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        lblReleaseDate.setText("Rel. date:");

        lblDirector.setText("Director:");

        lblDescription.setText("Description:");

        cbDirector.setMaximumSize(new java.awt.Dimension(64, 22));
        cbDirector.setPreferredSize(new java.awt.Dimension(64, 22));

        jScrollPane1.setMaximumSize(new java.awt.Dimension(50, 20));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 80));

        txtDescription.setColumns(20);
        txtDescription.setLineWrap(true);
        txtDescription.setRows(5);
        txtDescription.setMaximumSize(new java.awt.Dimension(70, 20));
        txtDescription.setMinimumSize(new java.awt.Dimension(70, 20));
        txtDescription.setPreferredSize(new java.awt.Dimension(64, 84));
        jScrollPane1.setViewportView(txtDescription);
        txtDescription.getAccessibleContext().setAccessibleParent(this);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.setEnabled(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblScore.setText("Score:");

        btnEnableChanges.setText("Enable changes");
        btnEnableChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnableChangesActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jPanelDatePicker.setPreferredSize(new java.awt.Dimension(64, 25));
        jPanelDatePicker.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDescription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblScore, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblReleaseDate, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtScore, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(cbDirector, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanelDatePicker, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(btnUpdate)
                            .addGap(6, 6, 6)
                            .addComponent(btnCancel)
                            .addGap(6, 6, 6)
                            .addComponent(btnEnableChanges)
                            .addGap(6, 6, 6)
                            .addComponent(btnDelete)
                            .addGap(6, 6, 6)
                            .addComponent(btnAdd)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblMoveID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(txtMovieID, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(19, 19, 19))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(45, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMovieID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMoveID))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName))
                        .addGap(18, 18, 18)
                        .addComponent(jPanelDatePicker, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblReleaseDate)
                        .addGap(26, 26, 26)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblScore))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbDirector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDirector))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDescription))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnCancel)
                    .addComponent(btnEnableChanges)
                    .addComponent(btnDelete)
                    .addComponent(btnAdd))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        Movie movie = new Movie() {
            {
                setMovieID(Integer.parseInt(txtMovieID.getText().trim()));
                setName(txtName.getText().trim());
                setReleaseDate(datePicker.getDate());
                setDescription(txtDescription.getText().trim());
                setDirector((Director)cbDirector.getSelectedItem());
                setScore(0);
            }
        };
        
        int check = JOptionPane.showConfirmDialog(this, "Are you sure?", "Update movie", 
                JOptionPane.YES_NO_OPTION);
        
        if (check == JOptionPane.YES_OPTION) {
            try {
                Controller.getInstance().updateMovie(movie);
                JOptionPane.showMessageDialog(this, "Updated movie: " + movie.getName(), "Info", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                Logger.getLogger(FrmMovie.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        this.dispose();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnEnableChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnableChangesActionPerformed
        btnAdd.setEnabled(false);
        btnDelete.setEnabled(false);
        btnCancel.setEnabled(true);
        btnEnableChanges.setEnabled(true);
        btnUpdate.setEnabled(true);

        txtMovieID.setEditable(true);
        txtName.setEditable(true);
        datePicker.setEnabled(true);
        txtScore.setEditable(false);
        txtDescription.setEditable(true);
        cbDirector.setEnabled(true);
    }//GEN-LAST:event_btnEnableChangesActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        Movie movie = new Movie() {
            {
                setMovieID(Integer.parseInt(txtMovieID.getText().trim()));
                setName(txtName.getText().trim());
                setReleaseDate(datePicker.getDate());
                setDescription(txtDescription.getText().trim());
                setDirector((Director)cbDirector.getSelectedItem());
                setScore(0);
            }
        };

        int check = JOptionPane.showConfirmDialog(this, "Are you sure?", "Delete movie",
            JOptionPane.YES_NO_OPTION);

        if (check == JOptionPane.YES_OPTION) {
            try {
                Controller.getInstance().deleteMovie(movie);
                JOptionPane.showMessageDialog(this, "Deleted movie: " + movie.getName(), "Info", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                Logger.getLogger(FrmMovie.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        this.dispose();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        //odradi validaciju polja prilikom unosa

        Movie movie = new Movie() {
            {
                setMovieID(Integer.parseInt(txtMovieID.getText().trim()));
                setName(txtName.getText().trim());
                setReleaseDate(datePicker.getDate());
                setDescription(txtDescription.getText().trim());
                setDirector((Director)cbDirector.getSelectedItem());
            }
        };

        JOptionPane.showMessageDialog(this,"Added movie: " + movie.getName(), "Success!", JOptionPane.INFORMATION_MESSAGE);

        try {
            Controller.getInstance().insertMovie(movie);
        } catch (Exception ex) {
            Logger.getLogger(FrmMovie.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Movie not saved. Try again.", "Error!", JOptionPane.ERROR_MESSAGE);
        }

        txtMovieID.setText(null);
        txtName.setText(null);
        datePicker.setDateToToday();
        txtDescription.setText(null);
        cbDirector.setSelectedIndex(0);
    }//GEN-LAST:event_btnAddActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEnableChanges;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<Object> cbDirector;
    private javax.swing.JPanel jPanelDatePicker;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblDirector;
    private javax.swing.JLabel lblMoveID;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblReleaseDate;
    private javax.swing.JLabel lblScore;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtMovieID;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtScore;
    // End of variables declaration//GEN-END:variables

    private void prepareView(FormMode mode, Movie movie)throws Exception{
        fillCB();
        setUpComponents(mode, movie);
    }
    
    private void fillCB() throws Exception{
        cbDirector.removeAllItems();
        List<Director> directors = Controller.getInstance().selectAllDirectors();
        
        for (Director director : directors) {
            cbDirector.addItem(director);
        }
    }    

    private void setUpComponents(FormMode mode, Movie movie) {
        DatePickerSettings dateSettings = new DatePickerSettings();
        dateSettings.setFirstDayOfWeek(DayOfWeek.MONDAY);
        datePicker = new DatePicker(dateSettings);
        datePicker.setDateToToday();
        datePicker.setPreferredSize(new Dimension(330, 25));
        jPanelDatePicker.add(datePicker);
        
        switch(mode) {
            case FORM_ADD:
                btnAdd.setEnabled(true);
                btnDelete.setEnabled(false);
                btnCancel.setEnabled(true);
                btnEnableChanges.setEnabled(false);
                btnUpdate.setEnabled(false);
                
                txtScore.setText(String.valueOf(0));
                txtScore.setEditable(false);
                break;
            case FORM_VIEW:
                btnAdd.setEnabled(false);
                btnDelete.setEnabled(true);
                btnCancel.setEnabled(true);
                btnEnableChanges.setEnabled(true);
                btnUpdate.setEnabled(false);
                
                txtMovieID.setText(String.valueOf(movie.getMovieID()));
                txtName.setText(movie.getName());
                datePicker.setDate(movie.getReleaseDate());
                txtScore.setText(String.valueOf(movie.getScore()));
                txtDescription.setText(movie.getDescription());
                cbDirector.setSelectedItem(movie.getDirector());
                
                txtMovieID.setEditable(false);
                txtName.setEditable(false);
                datePicker.setEnabled(false);
                txtScore.setEditable(false);
                txtDescription.setEditable(false);
                cbDirector.setEnabled(false);
                break;
            case FORM_EDIT:
                break;
        }
    }
}
